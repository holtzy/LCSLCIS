show_connection(o1, o2, showName = FALSE)
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
na.omit()
M1=don$name[order(don[,2], don[,3])]
M2=don$name[order(don[,3], don[,2])]
qualV <- system.time(
my_notprobmarkers <- qualV::LCS( as.character(M1),as.character(M2) )$LCS
)
qualV
LCSLCIS <- system.time(
res <- LCIS(o1,o2)
)
LCSLCIS
n <- 10000
o1 <- data.frame(
V1 = paste("item", seq(1:n), sep="-"),
V2 = seq(1,n) + rnorm(n)
)
nmodif <- 1000 * 0.01
tomodif <- sample(seq(1,n), nmodif)
o2 <- o1
o2$V2[tomodif] <- sample(seq(1,n), nmodif)
library(ggrepel)
show_connection(o1, o2, showName = FALSE)
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
na.omit()
M1=don$name[order(don[,2], don[,3])]
M2=don$name[order(don[,3], don[,2])]
qualV <- system.time(
my_notprobmarkers <- qualV::LCS( as.character(M1),as.character(M2) )$LCS
)
qualV
LCSLCIS <- system.time(
res <- LCIS(o1,o2)
)
LCSLCIS
qualV-LCSLCIS
a <- Sys.time()
res <- LCIS(o1,o2)
b <- Sys.time()
b - a
result <- data.frame(n=NA, qualV=NA, LCSLCIS=NA)
# Useful libraries
library(tidyverse)
library(ggrepel)
# Load qualV library used in GenMapComp
library(qualV)
# Load LCIS
library(LCSLCIS)
# Create a result data frame
result <- data.frame(n=NA, qualV=NA, LCSLCIS=NA)
# Try with several item numbers
num <- 0
for(i in c(100, 200, 400, 800, 1600, 3200, 6400, 12800){
# Number of item in the bucket orders:
n <- i
num <- num +1
# create a first bucket order
o1 <- data.frame(
V1 = paste("item", seq(1:n), sep="-"),
V2 = seq(1,n) + rnorm(n)
)
# create a second bucket order: almost the same, juste modify 10% of the markers
nmodif <- n * 0.01
tomodif <- sample(seq(1,n), nmodif)
o2 <- o1
o2$V2[tomodif] <- sample(seq(1,n), nmodif)
# Have a look (optionnal)
#show_connection(o1, o2, showName = FALSE)
# 1 ------- Make the calculation with qualV
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
na.omit()
# Find the non-problematic markers and count them
M1=don$name[order(don[,2], don[,3])]
M2=don$name[order(don[,3], don[,2])]
a <- Sys.time()
my_notprobmarkers <- qualV::LCS( as.character(M1),as.character(M2) )$LCS
b <- Sys.time()
qualV <- b - a
# 2 ------- Make the calculation with LCSLCIS
a <- Sys.time()
res <- LCIS(o1,o2)
b <- Sys.time()
LCSLCIS <- b - a
# 3 ------- Fill result table
result[num,] <- c(num, qualV, LCSLCIS)
}
qualV-LCSLCIS
data(geneticMap)
# create 2 big lists
map1$V2 <- as.numeric(map1$V0) * 1000 * map1$V2
map2$V2 <- as.numeric(map2$V0) * 1000 * map2$V2
o1 <- map1  %>% select(V1, V2) %>% arrange(V2)
o2 <- map2  %>% select(V1, V2) %>% arrange(V2)
o1bis <- o1
o1bis$V1=paste(o1bis$V1,"bis", sep="")
o2bis <- o2
o2bis$V1=paste(o2bis$V1,"bis", sep="")
o1=rbind(o1, o1bis)
o2=rbind(o2, o2bis)
# 1 ------- Make the calculation with qualV
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
na.omit()
# Find the non-problematic markers and count them
M1=don$name[order(don[,2], don[,3])]
M2=don$name[order(don[,3], don[,2])]
qualV <- system.time(
my_notprobmarkers <- qualV::LCS( as.character(M1),as.character(M2) )$LCS
)
# 2 ------- Make the calculation with LCSLCIS
LCSLCIS <- system.time(
res <- LCIS(o1,o2)
)
qualV-LCSLCIS
result
result <- data.frame(n=NA, qualV=NA, LCSLCIS=NA)
result
result <- data.frame(n=NA, qualV=NA, LCSLCIS=NA, nrow=10)
result
result <- data.frame(n=NA, qualV=NA, LCSLCIS=NA)
result <- data.frame( matrix(0, 10, 3))
library(LCSLCIS)
result <- data.frame( matrix(0, 10, 3))
colnames(result) <- c("n", "qualV", "LCSLCIS")
num <- 0
for(i in c(100, 200, 400, 800, 1600, 3200, 6400, 12800){
# Number of item in the bucket orders:
n <- i
num <- num +1
# create a first bucket order
o1 <- data.frame(
V1 = paste("item", seq(1:n), sep="-"),
V2 = seq(1,n) + rnorm(n)
)
# create a second bucket order: almost the same, juste modify 10% of the markers
nmodif <- n * 0.01
tomodif <- sample(seq(1,n), nmodif)
o2 <- o1
o2$V2[tomodif] <- sample(seq(1,n), nmodif)
# Have a look (optionnal)
#show_connection(o1, o2, showName = FALSE)
# 1 ------- Make the calculation with qualV
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
na.omit()
# Find the non-problematic markers and count them
M1=don$name[order(don[,2], don[,3])]
M2=don$name[order(don[,3], don[,2])]
a <- Sys.time()
my_notprobmarkers <- qualV::LCS( as.character(M1),as.character(M2) )$LCS
b <- Sys.time()
qualV <- b - a
# 2 ------- Make the calculation with LCSLCIS
a <- Sys.time()
res <- LCIS(o1,o2)
b <- Sys.time()
LCSLCIS <- b - a
# 3 ------- Fill result table
result[num,] <- c(num, qualV, LCSLCIS)
}
qualV-LCSLCIS
data(geneticMap)
# create 2 big lists
map1$V2 <- as.numeric(map1$V0) * 1000 * map1$V2
map2$V2 <- as.numeric(map2$V0) * 1000 * map2$V2
o1 <- map1  %>% select(V1, V2) %>% arrange(V2)
o2 <- map2  %>% select(V1, V2) %>% arrange(V2)
o1bis <- o1
o1bis$V1=paste(o1bis$V1,"bis", sep="")
o2bis <- o2
o2bis$V1=paste(o2bis$V1,"bis", sep="")
o1=rbind(o1, o1bis)
o2=rbind(o2, o2bis)
# 1 ------- Make the calculation with qualV
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
na.omit()
# Find the non-problematic markers and count them
M1=don$name[order(don[,2], don[,3])]
M2=don$name[order(don[,3], don[,2])]
qualV <- system.time(
my_notprobmarkers <- qualV::LCS( as.character(M1),as.character(M2) )$LCS
)
# 2 ------- Make the calculation with LCSLCIS
LCSLCIS <- system.time(
res <- LCIS(o1,o2)
)
qualV-LCSLCIS
num <- 0
for(i in c(100, 200, 400, 800, 1600, 3200, 6400, 12800)){
# Number of item in the bucket orders:
n <- i
num <- num +1
# create a first bucket order
o1 <- data.frame(
V1 = paste("item", seq(1:n), sep="-"),
V2 = seq(1,n) + rnorm(n)
)
# create a second bucket order: almost the same, juste modify 10% of the markers
nmodif <- n * 0.01
tomodif <- sample(seq(1,n), nmodif)
o2 <- o1
o2$V2[tomodif] <- sample(seq(1,n), nmodif)
# Have a look (optionnal)
#show_connection(o1, o2, showName = FALSE)
# 1 ------- Make the calculation with qualV
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
na.omit()
# Find the non-problematic markers and count them
M1=don$name[order(don[,2], don[,3])]
M2=don$name[order(don[,3], don[,2])]
a <- Sys.time()
my_notprobmarkers <- qualV::LCS( as.character(M1),as.character(M2) )$LCS
b <- Sys.time()
qualV <- b - a
# 2 ------- Make the calculation with LCSLCIS
a <- Sys.time()
res <- LCIS(o1,o2)
b <- Sys.time()
LCSLCIS <- b - a
# 3 ------- Fill result table
result[num,] <- c(num, qualV, LCSLCIS)
}
result
result %>%
gather(key, value, -1)
result %>%
gather(algo, time, -1) %>%
ggplot( aes(x=n, y=time, color=algo)) +
geom_line()
result[n,] <- c(num, qualV, LCSLCIS)
for(i in c(100, 200, 400, 800, 1600, 3200, 6400, 12800)){
# Number of item in the bucket orders:
n <- i
num <- num +1
# create a first bucket order
o1 <- data.frame(
V1 = paste("item", seq(1:n), sep="-"),
V2 = seq(1,n) + rnorm(n)
)
# create a second bucket order: almost the same, juste modify 10% of the markers
nmodif <- n * 0.01
tomodif <- sample(seq(1,n), nmodif)
o2 <- o1
o2$V2[tomodif] <- sample(seq(1,n), nmodif)
# Have a look (optionnal)
#show_connection(o1, o2, showName = FALSE)
# 1 ------- Make the calculation with qualV
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
na.omit()
# Find the non-problematic markers and count them
M1=don$name[order(don[,2], don[,3])]
M2=don$name[order(don[,3], don[,2])]
a <- Sys.time()
my_notprobmarkers <- qualV::LCS( as.character(M1),as.character(M2) )$LCS
b <- Sys.time()
qualV <- b - a
# 2 ------- Make the calculation with LCSLCIS
a <- Sys.time()
res <- LCIS(o1,o2)
b <- Sys.time()
LCSLCIS <- b - a
# 3 ------- Fill result table
result[n,] <- c(num, qualV, LCSLCIS)
}
for(i in c(100, 200, 400, 800, 1600, 3200, 6400, 12800)){
# Number of item in the bucket orders:
n <- i
num <- num +1
# create a first bucket order
o1 <- data.frame(
V1 = paste("item", seq(1:n), sep="-"),
V2 = seq(1,n) + rnorm(n)
)
# create a second bucket order: almost the same, juste modify 10% of the markers
nmodif <- n * 0.01
tomodif <- sample(seq(1,n), nmodif)
o2 <- o1
o2$V2[tomodif] <- sample(seq(1,n), nmodif)
# Have a look (optionnal)
#show_connection(o1, o2, showName = FALSE)
# 1 ------- Make the calculation with qualV
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
na.omit()
# Find the non-problematic markers and count them
M1=don$name[order(don[,2], don[,3])]
M2=don$name[order(don[,3], don[,2])]
a <- Sys.time()
my_notprobmarkers <- qualV::LCS( as.character(M1),as.character(M2) )$LCS
b <- Sys.time()
qualV <- b - a
# 2 ------- Make the calculation with LCSLCIS
a <- Sys.time()
res <- LCIS(o1,o2)
b <- Sys.time()
LCSLCIS <- b - a
# 3 ------- Fill result table
result[num,] <- c(n, qualV, LCSLCIS)
}
result %>%
gather(algo, time, -1) %>%
ggplot( aes(x=n, y=time, color=algo)) +
geom_line()
result
# Create a result data frame
result <- data.frame( matrix(0, 10, 3))
colnames(result) <- c("n", "qualV", "LCSLCIS")
# Try with several item numbers
num <- 0
for(i in c(100, 200, 400, 800, 1600, 3200, 6400, 12800)){
# Number of item in the bucket orders:
n <- i
num <- num +1
# create a first bucket order
o1 <- data.frame(
V1 = paste("item", seq(1:n), sep="-"),
V2 = seq(1,n) + rnorm(n)
)
# create a second bucket order: almost the same, juste modify 10% of the markers
nmodif <- n * 0.01
tomodif <- sample(seq(1,n), nmodif)
o2 <- o1
o2$V2[tomodif] <- sample(seq(1,n), nmodif)
# Have a look (optionnal)
#show_connection(o1, o2, showName = FALSE)
# 1 ------- Make the calculation with qualV
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
na.omit()
# Find the non-problematic markers and count them
M1=don$name[order(don[,2], don[,3])]
M2=don$name[order(don[,3], don[,2])]
a <- Sys.time()
my_notprobmarkers <- qualV::LCS( as.character(M1),as.character(M2) )$LCS
b <- Sys.time()
qualV <- b - a
# 2 ------- Make the calculation with LCSLCIS
a <- Sys.time()
res <- LCIS(o1,o2)
b <- Sys.time()
LCSLCIS <- b - a
# 3 ------- Fill result table
result[num,] <- c(n, qualV, LCSLCIS)
}
result %>%
gather(algo, time, -1) %>%
ggplot( aes(x=n, y=time, color=algo)) +
geom_line()
result %>%
gather(algo, time, -1) %>%
ggplot( aes(x=n, y=time, color=algo)) +
geom_line() +
xlab("# of items in o1 and o2") +
ylab("time ellapsed")
result %>%
gather(algo, time, -1) %>%
ggplot( aes(x=n, y=time, color=algo)) +
geom_line() +
geom_point() +
xlab("# of items in o1 and o2") +
ylab("time ellapsed")
result
# Useful libraries
library(tidyverse)
library(ggrepel)
# Load qualV library used in GenMapComp
library(qualV)
# Load LCIS
library(LCSLCIS)
# Create a result data frame
result <- data.frame( matrix(0, 8, 3))
colnames(result) <- c("n", "qualV", "LCSLCIS")
# Try with several item numbers
num <- 0
for(i in c(100, 200, 400, 800, 1600, 3200, 6400, 12800)){
# Number of item in the bucket orders:
n <- i
num <- num +1
# create a first bucket order
o1 <- data.frame(
V1 = paste("item", seq(1:n), sep="-"),
V2 = seq(1,n) + rnorm(n)
)
# create a second bucket order: almost the same, juste modify 10% of the markers
nmodif <- n * 0.01
tomodif <- sample(seq(1,n), nmodif)
o2 <- o1
o2$V2[tomodif] <- sample(seq(1,n), nmodif)
# Have a look (optionnal)
#show_connection(o1, o2, showName = FALSE)
# 1 ------- Make the calculation with qualV
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
na.omit()
# Find the non-problematic markers and count them
M1=don$name[order(don[,2], don[,3])]
M2=don$name[order(don[,3], don[,2])]
a <- Sys.time()
my_notprobmarkers <- qualV::LCS( as.character(M1),as.character(M2) )$LCS
b <- Sys.time()
qualV <- b - a
# 2 ------- Make the calculation with LCSLCIS
a <- Sys.time()
res <- LCIS(o1,o2)
b <- Sys.time()
LCSLCIS <- b - a
# 3 ------- Fill result table
result[num,] <- c(n, qualV, LCSLCIS)
}
# Plot the result
png("speed_test_result.png")
result %>%
gather(algo, time, -1) %>%
ggplot( aes(x=n, y=time, color=algo)) +
geom_line() +
geom_point() +
xlab("# of items in o1 and o2") +
ylab("time ellapsed")
dev.off()
getwd()
setwd("/Users/yan/Desktop/LCSLCIS/speed_test")
png("speed_test_result.png")
result %>%
gather(algo, time, -1) %>%
ggplot( aes(x=n, y=time, color=algo)) +
geom_line() +
geom_point() +
xlab("# of items in o1 and o2") +
ylab("time ellapsed")
dev.off()
# Plot the result
png("speed_test_result.png")
result %>%
gather(algo, time, -1) %>%
ggplot( aes(x=n, y=time, color=algo)) +
geom_line() +
geom_point() +
xlab("# of items") +
ylab("time ellapsed")
dev.off()
# Plot the result
png("speed_test_result.png", heigth=1000, width=1000)
result %>%
gather(algo, time, -1) %>%
ggplot( aes(x=n, y=time, color=algo)) +
geom_line() +
geom_point() +
xlab("# of items") +
ylab("time ellapsed")
dev.off()
png("speed_test_result.png", heigth="1000px", width="1000px")
png("speed_test_result.png", fig.heigth="1000px", width="1000px")
png("speed_test_result.png", fig.heigth="1000px", fig.width="1000px")
png
png("speed_test_result.png", heigth=1000, width=1000)
png("speed_test_result.png", height=1000, width=1000)
result %>%
gather(algo, time, -1) %>%
ggplot( aes(x=n, y=time, color=algo)) +
geom_line() +
geom_point() +
xlab("# of items") +
ylab("time ellapsed")
dev.off()
# Plot the result
png("speed_test_result.png")
result %>%
gather(algo, time, -1) %>%
ggplot( aes(x=n, y=time, color=algo)) +
geom_line() +
geom_point() +
xlab("# of items") +
ylab("time ellapsed")
dev.off()
result
write.table(result, file="speed_test_result.csv", sep=",")
write.table(result, file="speed_test_result.csv", sep=",", row.names=FALSE)
result$qualV[8] /  result$LCSLCIS[8]
library(devtools)
install_github("holtzy/LCSLCIS")
library(LCSLCIS)
help(show_connection)
library(tidyverse)
load("~/Dropbox/CRYPTO/5_ARBITRAGE/arbitrage_bitstamp_kraken_BCHEUR_25.Rdata")
bilan[,-which(colnames(bilan)%in%c("transaction", "rebalance"))]= apply( bilan[,-which(colnames(bilan)%in%c("transaction", "rebalance"))], 2, as.numeric ) %>% as.tibble()
bilan$time=as.POSIXct( bilan$time, origin="1970-01-01")
# For each transaction, I calculate if it made me earn money or not.
bilan$gain=NA
bilan$gain[which(bilan$transaction=="yes")] = bilan$total_euro[ which(bilan$transaction=="yes") ] - bilan$total_euro[ which(bilan$transaction=="yes")-1 ]
bilan
len_period=max(bilan$time) - min(bilan$time)
len_period
a=bilan %>% filter(transaction=="yes") %>% nrow()
b=bilan %>% filter(transaction=="yes") %>% filter(rebalance=="yes") %>% nrow()
cat("I have done ", a , " transaction, ", b, " of them where for rebalancing")
start = bilan$total_euro[1]
end = bilan$total_euro[nrow(bilan)]
gain = end-start
gain_perc=gain/mean(bilan$total)*100
cat("I started with ", start, " euros and now have ", end, " (I made ", gain, " euros)")
cat(" This is a profit of about", round(gain_perc,4), " %")
start = bilan$total_crypto[1]
end = bilan$total_crypto[nrow(bilan)]
gain = end-start
cat("I started with ", start, " crypto and now have ", end, " (I made ", gain, " crypto)")
