xlab("")
# A function that plot the relationship between 2 lists:
show_connection <- function(o1, o2, tokeep){
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1)
ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name)) +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA)) +
geom_line() +
theme_void() +
theme(legend.position="none") +
scale_y_reverse() +
xlab("")
}
# A function that plot the relationship between 2 lists:
show_connection <- function(o1, o2, tokeep){
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1)
ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name)) +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA)) +
geom_line() +
theme_void() +
theme(legend.position="none") +
scale_y_reverse() +
xlab("")
}
# Plot the relationship between both?
library(tidyverse)
library(ggrepel)
png("img/fig1.png")
show_connection(o1, o2, NA)
dev.off()
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1)
don
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1) %>%
na.omit()
# A function that plot the relationship between 2 lists:
show_connection <- function(o1, o2, tokeep){
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1) %>%
na.omit()
ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name)) +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA)) +
geom_line() +
theme_void() +
theme(legend.position="none") +
scale_y_reverse() +
xlab("")
}
# Plot the relationship between both?
library(tidyverse)
library(ggrepel)
png("img/fig1.png")
show_connection(o1, o2, NA)
dev.off()
# A function that plot the relationship between 2 lists:
show_connection <- function(o1, o2, tokeep=NA){
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1) %>%
na.omit()
ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name)) +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA)) +
geom_line() +
theme_void() +
theme(legend.position="none") +
scale_y_reverse() +
xlab("")
}
show_connection(o1, o2)
don
# A function that plot the relationship between 2 lists:
show_connection <- function(o1, o2, tokeep=NA){
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1) %>%
na.omit()
if(!is.na(tokeep)){
don <- don %>% filter(name %in% tokeep)
}
ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name)) +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA)) +
geom_line() +
theme_void() +
theme(legend.position="none") +
scale_y_reverse() +
xlab("")
}
# We can represent that on the diagram:
show_connection(o1, o2, tokeep=res$LCS)
if(!is.null(tokeep)){
don <- don %>% filter(name %in% tokeep)
}
# A function that plot the relationship between 2 lists:
show_connection <- function(o1, o2, tokeep=""){
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1) %>%
na.omit()
if(!is.null(tokeep)){
don <- don %>% filter(name %in% tokeep)
}
ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name)) +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA)) +
geom_line() +
theme_void() +
theme(legend.position="none") +
scale_y_reverse() +
xlab("")
}
show_connection(o1, o2)
show_connection(o1, o2)
# We can represent that on the diagram:
show_connection(o1, o2, tokeep=res$LCS)
tokeep=""
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1) %>%
na.omit()
don
is.null(tokeep)
# A function that plot the relationship between 2 lists:
show_connection <- function(o1, o2, tokeep=""){
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1) %>%
na.omit()
if(is.null(tokeep)==FALSE){
don <- don %>% filter(name %in% tokeep)
}
ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name)) +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA)) +
geom_line() +
theme_void() +
theme(legend.position="none") +
scale_y_reverse() +
xlab("")
}
show_connection(o1, o2)
tokeep=""
is.null(tokeep)
tokeep
tokeep=NA
tokeep
is.null(tokeep)
is.na(tokeep)
!is.na(tokeep)
tokeep=res$LCS
!is.na(tokeep)
# A function that plot the relationship between 2 lists:
show_connection <- function(o1, o2, tokeep=NA){
# Prepare the data: merge the 2 lists and make a 'long' or 'tidy' format:
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1) %>%
na.omit()
# It is possible to keep only a sample of the elements:
if( !is.na(tokeep) ){ don <- don %>% filter(name %in% tokeep) }
# Make the plot
ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name)) +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA)) +
geom_line() +
theme_void() +
theme(legend.position="none") +
scale_y_reverse() +
xlab("")
}
# Plot the relationship between both?
library(tidyverse)
library(ggrepel)
show_connection(o1, o2)
# run the LCS function
res <- LCS(o1,o2)
# We can represent that on the diagram:
show_connection(o1, o2, tokeep=res$LCS)
# A function that plot the relationship between 2 lists:
show_connection <- function(o1, o2, tokeep=NA){
# Prepare the data: merge the 2 lists and make a 'long' or 'tidy' format:
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1) %>%
na.omit()
# It is possible to keep only a sample of the elements:
if( all(is.na(tokeep))==FALSE ){ don <- don %>% filter(name %in% tokeep) }
# Make the plot
ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name)) +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA)) +
geom_line() +
theme_void() +
theme(legend.position="none") +
scale_y_reverse() +
xlab("")
}
show_connection(o1, o2)
# We can represent that on the diagram:
show_connection(o1, o2, tokeep=res$LCS)
# run the LCS function
res <- LCIS(o1,o2)
# The number of elements we can keep without order mismatch is
res$LLCIS
# The elements we can keep are:
res$LCIS
# Plot it
show_connection(o1, o2, tokeep=res$LCIS)
# We can represent that on the diagram:
png("img/fig2.png")
show_connection(o1, o2, tokeep=res$LCS)
dev.off()
# run the LCS function
res <- LCIS(o1,o2)
# Now we have a lot of new information.
# The number of elements we can keep without order mismatch is
res$LLCIS
# The elements we can keep are:
res$LCIS
# Plot it
png("img/fig3.png")
show_connection(o1, o2, tokeep=res$LCIS)
dev.off()
# Plot the relationship between both?
library(tidyverse)
library(ggrepel)
png("img/fig1.png")
show_connection(o1, o2)
dev.off()
# run the LCS function
res <- LCS(o1,o2)
# Now we have a lot of new information.
# The number of elements we can keep without order mismatch is
res$LLCS
# The elements we can keep are:
res$LCS
# We can represent that on the diagram:
png("img/fig2.png")
show_connection(o1, o2, tokeep=res$LCS)
dev.off()
# run the LCS function
res <- LCIS(o1,o2)
# Now we have a lot of new information.
# The number of elements we can keep without order mismatch is
res$LLCIS
# The elements we can keep are:
res$LCIS
# Plot it
png("img/fig3.png")
show_connection(o1, o2, tokeep=res$LCIS)
dev.off()
# A function that plot the relationship between 2 lists:
show_connection <- function(o1, o2, tokeep=NA){
# Prepare the data: merge the 2 lists and make a 'long' or 'tidy' format:
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1) %>%
na.omit()
# It is possible to keep only a sample of the elements:
if( all(is.na(tokeep))==FALSE ){ don <- don %>% filter(name %in% tokeep) }
# Make the plot
ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name)) +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA)) +
geom_line() +
theme_void() +
theme(legend.position="none") +
scale_y_reverse() +
xlab("") +
...
}
show_connection(o1, o2)
c(o1$V2, o2$V2)
max(c(o1$V2, o2$V2))
# A function that plot the relationship between 2 lists:
show_connection <- function(o1, o2, tokeep=NA){
# Prepare the data: merge the 2 lists and make a 'long' or 'tidy' format:
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1) %>%
na.omit()
# It is possible to keep only a sample of the elements:
if( all(is.na(tokeep))==FALSE ){ don <- don %>% filter(name %in% tokeep) }
# Make the plot
ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name)) +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA)) +
geom_line() +
theme_void() +
theme(legend.position="none") +
scale_y_reverse() +
xlab("") +
ylim(0, max(c(o1$V2, o2$V2)))
...
}
show_connection(o1, o2)
# Make the plot
ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name)) +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA)) +
geom_line() +
theme_void() +
theme(legend.position="none") +
#scale_y_reverse() +
xlab("") +
ylim(max(c(o1$V2, o2$V2)), 0)
# Make the plot
ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name)) +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA)) +
geom_line() +
theme_void() +
theme(legend.position="none") +
#scale_y_reverse() +
xlab("") +
ylim(max(c(o1$V2, o2$V2)), 0)
show_connection(o1, o2)
# Make the plot
ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name)) +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA)) +
geom_line() +
theme_void() +
theme(legend.position="none") +
#scale_y_reverse() +
xlab("") +
ylim( max(c(o1$V2, o2$V2)), 0)
# A function that plot the relationship between 2 lists:
show_connection <- function(o1, o2, tokeep=NA){
# Prepare the data: merge the 2 lists and make a 'long' or 'tidy' format:
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1) %>%
na.omit()
# It is possible to keep only a sample of the elements:
if( all(is.na(tokeep))==FALSE ){ don <- don %>% filter(name %in% tokeep) }
# Make the plot
ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name)) +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA)) +
geom_line() +
theme_void() +
theme(legend.position="none") +
#scale_y_reverse() +
xlab("") +
ylim( max(c(o1$V2, o2$V2)), 0)
}
# Make the plot
ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name)) +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA)) +
geom_line() +
theme_void() +
theme(legend.position="none") +
#scale_y_reverse() +
xlab("") +
ylim( max(c(o1$V2, o2$V2)), 0)
# A function that plot the relationship between 2 lists:
show_connection <- function(o1, o2, tokeep=NA){
# Prepare the data: merge the 2 lists and make a 'long' or 'tidy' format:
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1) %>%
na.omit()
# It is possible to keep only a sample of the elements:
if( all(is.na(tokeep))==FALSE ){ don <- don %>% filter(name %in% tokeep) }
# Make the plot
ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name)) +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA)) +
geom_line() +
theme_void() +
theme(legend.position="none") +
#scale_y_reverse() +
xlab("") +
ylim( max(c(o1$V2, o2$V2)), 0)
}
# A function that plot the relationship between 2 lists:
show_connection <- function(o1, o2, tokeep=NA){
# Prepare the data: merge the 2 lists and make a 'long' or 'tidy' format:
don <- merge(o1, o2, by.x="V1", by.y="V1", all=T) %>%
rename(name=V1, order1=V2.x, order2=V2.y) %>%
gather(ord, position, -1) %>%
na.omit()
# It is possible to keep only a sample of the elements:
if( all(is.na(tokeep))==FALSE ){ don <- don %>% filter(name %in% tokeep) }
# Make the plot
ggplot( don, aes(x=ord, y=position, label=name, group=name, color=name)) +
geom_segment( x=1, xend=1, y=-max(o1$V2), yend=0, color="black", size=0.3) +
geom_segment( x=2, xend=2, y=-max(o2$V2), yend=0, color="black", size=0.3) +
geom_point() +
geom_text_repel( data=don %>% filter(ord=="order1"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(0,.95)) +
geom_text_repel( data=don %>% filter(ord=="order2"), direction = "y" , segment.color = "grey", box.padding = 0.001, color="black", xlim=c(2.05,NA)) +
geom_line() +
theme_void() +
theme(legend.position="none") +
#scale_y_reverse() +
xlab("") +
ylim( max(c(o1$V2, o2$V2)), 0)
}
# Plot the relationship between both?
library(tidyverse)
library(ggrepel)
png("img/fig1.png")
show_connection(o1, o2)
dev.off()
# run the LCS function
res <- LCS(o1,o2)
# Now we have a lot of new information.
# The number of elements we can keep without order mismatch is
res$LLCS
# The elements we can keep are:
res$LCS
# We can represent that on the diagram:
png("img/fig2.png")
show_connection(o1, o2, tokeep=res$LCS)
dev.off()
# run the LCS function
res <- LCIS(o1,o2)
# Now we have a lot of new information.
# The number of elements we can keep without order mismatch is
res$LLCIS
# The elements we can keep are:
res$LCIS
# Plot it
png("img/fig3.png")
show_connection(o1, o2, tokeep=res$LCIS)
dev.off()
# Total figure
library(patchwork)
devtools::install_github("thomasp85/patchwork")
a + b
# Plot it
b <- show_connection(o1, o2, tokeep=res$LCIS)
# We can represent that on the diagram:
a <- show_connection(o1, o2, tokeep=res$LCS)
# Total figure
library(patchwork)
a + b
# Total figure
devtools::install_github("thomasp85/patchwork")
# Total figure
library(patchwork)
a + b
# Total figure
devtools::install_github("thomasp85/patchwork", force=TRUE)
library(patchwork)
# Total figure
library(gridExtra)
grid.arrange(a,b, ncol=2)
