mutate( thres = i) %>%
arrange( nb_over_1 )
nbSignifDiff <- rbind( nbSignifDiff, df)
}
return(nbSignifDiff)
}
nbSignifDiff <- find_signif_diff(diff)
df <-  diff %>%
group_by(symbol) %>%
filter(diff_perc > i) %>%
summarise( nb_over_thres = n() ) %>%
mutate( thres = i) %>%
arrange( nb_over_thres )
# A function that counts the number of significant differences for several threshold
find_signif_diff <- function(diff){
nbSignifDiff=data.frame()
for( i in seq(0.7,3,0.1)){
df <-  diff %>%
group_by(symbol) %>%
filter(diff_perc > i) %>%
summarise( nb_over_thres = n() ) %>%
mutate( thres = i) %>%
arrange( nb_over_thres )
nbSignifDiff <- rbind( nbSignifDiff, df)
}
return(nbSignifDiff)
}
nbSignifDiff <- find_signif_diff(diff)
ggplot(nbSignifDiff, aes(x=thres, y=nb_over_thres, group=symbol, color=symbol)) +
geom_line() +
ylab("Number of cases in x days") +
xlab("Difference threshold (%)")
#
diff <- find_differences(list_pairs[1,1], list_pairs[1,2])
# find all the pairs of platform
list_platforms <- unique(Ticker$platform)
list_pairs <- combn(list_platforms, 2)
#
diff <- find_differences(list_pairs[1,1], list_pairs[1,2])
diff
list_pairs
# find all the pairs of platform
list_platforms <- Ticker$platform %>% unique() %>% as.character()
list_pairs <- combn(list_platforms, 2)
#
diff <- find_differences(list_pairs[1,1], list_pairs[1,2])
list_pairs
list_pairs[1,1]
list_pairs[1,2]
list_pairs[1,2]
list_pairs[1,1]
list_pairs
#
diff <- find_differences(list_pairs[1,1], list_pairs[2,1])
list_pairs[2,1]
list_pairs[1,1]
# Find differences between kraken and bitstamp
diff <- find_differences("Bitstamp", "Kraken")
#
diff <- find_differences(list_pairs[1,1], list_pairs[2,1])
list_pairs[1,1]
list_pairs[2,1]
plat1="Cex"
plat2="Kraken"
Ticker %>%
filter(platform %in% c(plat1, plat2))
Ticker %>%
filter(platform %in% c(plat1, plat2)) %>%
select(time, platform, symbol, ask, bid)
Ticker %>%
filter(platform %in% c(plat1, plat2)) %>%
select(time, platform, symbol, ask, bid) %>%
mutate(ask=as.numeric(ask), bid=as.numeric(bid)) %>%
gather(temp, value, -time, -platform, -symbol)
Ticker %>%
filter(platform %in% c(plat1, plat2)) %>%
select(time, platform, symbol, ask, bid) %>%
mutate(ask=as.numeric(ask), bid=as.numeric(bid)) %>%
gather(temp, value, -time, -platform, -symbol) %>%
unite(temp1, platform, temp, sep="_")
Ticker %>%
filter(platform %in% c(plat1, plat2)) %>%
select(time, platform, symbol, ask, bid) %>%
mutate(ask=as.numeric(ask), bid=as.numeric(bid)) %>%
gather(temp, value, -time, -platform, -symbol) %>%
unite(temp1, platform, temp, sep="_") %>%
spread( key=temp1, value=value)
Ticker %>%
filter(platform %in% c(plat1, plat2)) %>%
select(time, platform, symbol, ask, bid) %>%
mutate(ask=as.numeric(ask), bid=as.numeric(bid)) %>%
gather(temp, value, -time, -platform, -symbol) %>%
unite(temp1, platform, temp, sep="_") %>%
spread( key=temp1, value=value) %>%
mutate(
diff1=(Bitstamp_bid-Kraken_ask)/Bitstamp_bid*100,
diff2=(Kraken_bid-Bitstamp_ask)/Kraken_bid*100
)
Ticker %>%
filter(platform %in% c(plat1, plat2)) %>%
select(time, platform, symbol, ask, bid) %>%
mutate(ask=as.numeric(ask), bid=as.numeric(bid)) %>%
gather(temp, value, -time, -platform, -symbol) %>%
unite(temp1, platform, temp, sep="_") %>%
spread( key=temp1, value=value)
Ticker %>%
filter(platform %in% c(plat1, plat2)) %>%
select(time, platform, symbol, ask, bid)
Ticker %>%
filter(platform %in% c(plat1, plat2)) %>%
select(time, platform, symbol, ask, bid) %>%
mutate(ask=as.numeric(ask), bid=as.numeric(bid)) %>%
gather(temp, value, -time, -platform, -symbol)
diff <- Ticker %>%
filter(platform %in% c(plat1, plat2)) %>%
select(time, platform, symbol, ask, bid) %>%
mutate(ask=as.numeric(ask), bid=as.numeric(bid)) %>%
gather(temp, value, -time, -platform, -symbol) %>%
gsub("Cex","Plat1",platform)
diff <- Ticker %>%
filter(platform %in% c(plat1, plat2)) %>%
select(time, platform, symbol, ask, bid) %>%
mutate(ask=as.numeric(ask), bid=as.numeric(bid)) %>%
gather(temp, value, -time, -platform, -symbol) %>%
mutate(platform=gsub("Cex","Plat1", platform))
Ticker %>%
filter(platform %in% c(plat1, plat2)) %>%
select(time, platform, symbol, ask, bid) %>%
mutate(ask=as.numeric(ask), bid=as.numeric(bid)) %>%
gather(temp, value, -time, -platform, -symbol) %>%
mutate(platform=gsub("Cex","Plat1", platform))
diff <- Ticker %>%
filter(platform %in% c(plat1, plat2)) %>%
select(time, platform, symbol, ask, bid) %>%
mutate(ask=as.numeric(ask), bid=as.numeric(bid)) %>%
gather(temp, value, -time, -platform, -symbol) %>%
mutate(platform=gsub(plat1,"Plat1", platform))
Ticker %>%
filter(platform %in% c(plat1, plat2)) %>%
select(time, platform, symbol, ask, bid) %>%
mutate(ask=as.numeric(ask), bid=as.numeric(bid)) %>%
gather(temp, value, -time, -platform, -symbol) %>%
mutate(platform=gsub(plat1,"Plat1", platform))
diff <- Ticker %>%
filter(platform %in% c(plat1, plat2)) %>%
select(time, platform, symbol, ask, bid) %>%
mutate(ask=as.numeric(ask), bid=as.numeric(bid)) %>%
gather(temp, value, -time, -platform, -symbol) %>%
mutate(platform=gsub(plat1,"Plat1", platform)) %>%
mutate(platform=gsub(plat2,"Plat2", platform)) %>%
unite(temp1, platform, temp, sep="_") %>%
spread( key=temp1, value=value) %>%
mutate(
diff1=(Bitstamp_bid-Kraken_ask)/Bitstamp_bid*100,
diff2=(Kraken_bid-Bitstamp_ask)/Kraken_bid*100
) %>%
rowwise() %>%
mutate( diff_perc=max(diff1, diff2) )
diff <- Ticker %>%
filter(platform %in% c(plat1, plat2)) %>%
select(time, platform, symbol, ask, bid) %>%
mutate(ask=as.numeric(ask), bid=as.numeric(bid)) %>%
gather(temp, value, -time, -platform, -symbol) %>%
mutate(platform=gsub(plat1,"Plat1", platform)) %>%
mutate(platform=gsub(plat2,"Plat2", platform)) %>%
unite(temp1, platform, temp, sep="_") %>%
spread( key=temp1, value=value)
Ticker %>%
filter(platform %in% c(plat1, plat2)) %>%
select(time, platform, symbol, ask, bid) %>%
mutate(ask=as.numeric(ask), bid=as.numeric(bid)) %>%
gather(temp, value, -time, -platform, -symbol) %>%
mutate(platform=gsub(plat1,"Plat1", platform)) %>%
mutate(platform=gsub(plat2,"Plat2", platform)) %>%
unite(temp1, platform, temp, sep="_") %>%
spread( key=temp1, value=value)
# A function that calculates the difference between 2 platforms for every currency at each time stamp
find_differences <- function(plat1, plat2){
diff <- Ticker %>%
filter(platform %in% c(plat1, plat2)) %>%
select(time, platform, symbol, ask, bid) %>%
mutate(ask=as.numeric(ask), bid=as.numeric(bid)) %>%
gather(temp, value, -time, -platform, -symbol) %>%
mutate(platform=gsub(plat1,"Plat1", platform)) %>%
mutate(platform=gsub(plat2,"Plat2", platform)) %>%
unite(temp1, platform, temp, sep="_") %>%
spread( key=temp1, value=value) %>%
mutate(
diff1=(plat1_bid-plat2_ask)/plat1_bid*100,
diff2=(plat2_bid-plat1_ask)/plat2_bid*100
) %>%
rowwise() %>%
mutate( diff_perc=max(diff1, diff2) )
return(diff)
}
# Find differences between kraken and bitstamp
diff <- find_differences("Bitstamp", "Kraken")
# A function that calculates the difference between 2 platforms for every currency at each time stamp
find_differences <- function(plat1, plat2){
diff <- Ticker %>%
filter(platform %in% c(plat1, plat2)) %>%
select(time, platform, symbol, ask, bid) %>%
mutate(ask=as.numeric(ask), bid=as.numeric(bid)) %>%
gather(temp, value, -time, -platform, -symbol) %>%
mutate(platform=gsub(plat1,"plat1", platform)) %>%
mutate(platform=gsub(plat2,"plat2", platform)) %>%
unite(temp1, platform, temp, sep="_") %>%
spread( key=temp1, value=value) %>%
mutate(
diff1=(plat1_bid-plat2_ask)/plat1_bid*100,
diff2=(plat2_bid-plat1_ask)/plat2_bid*100
) %>%
rowwise() %>%
mutate( diff_perc=max(diff1, diff2) )
return(diff)
}
# Find differences between kraken and bitstamp
diff <- find_differences("Bitstamp", "Kraken")
ggplot(diff, aes(x=time, y=diff_perc, group=symbol, fill=symbol)) +
geom_area() +
facet_wrap(~symbol, nrow=5) +
theme(legend.position="none") +
ylim(0,4)
# A function that counts the number of significant differences for several threshold
find_signif_diff <- function(diff){
nbSignifDiff=data.frame()
for( i in seq(0.7,3,0.1)){
df <-  diff %>%
group_by(symbol) %>%
filter(diff_perc > i) %>%
summarise( nb_over_thres = n() ) %>%
mutate( thres = i) %>%
arrange( nb_over_thres )
nbSignifDiff <- rbind( nbSignifDiff, df)
}
return(nbSignifDiff)
}
nbSignifDiff <- find_signif_diff(diff)
ggplot(nbSignifDiff, aes(x=thres, y=nb_over_thres, group=symbol, color=symbol)) +
geom_line() +
ylab("Number of cases in x days") +
xlab("Difference threshold (%)")
# find all the pairs of platform
list_platforms <- Ticker$platform %>% unique() %>% as.character()
list_pairs <- combn(list_platforms, 2)
#
diff <- find_differences(list_pairs[1,1], list_pairs[2,1])
nbSignifDiff <- find_signif_diff(diff)
nbSignifDiff
nbSignifDiff$pair <- paste( list_pairs[1,1], list_pairs[2,1], sep="-")
nbSignifDiff
#
for(i in c(1:ncol(list_pairs))){
diff <- find_differences(list_pairs[1,i], list_pairs[2,i])
nbSignifDiff <- find_signif_diff(diff)
nbSignifDiff$pair <- paste( list_pairs[1,i], list_pairs[2,i], sep="-")
head(nbSignifDiff)
}
head(nbSignifDiff)
#
bilan=data.frame()
for(i in c(1:ncol(list_pairs))){
diff <- find_differences(list_pairs[1,i], list_pairs[2,i])
nbSignifDiff <- find_signif_diff(diff)
nbSignifDiff$pair <- paste( list_pairs[1,i], list_pairs[2,i], sep="-")
bilan <- rbind(bilan, nbSignifDiff)
}
bilan
#
ggplot(bilan, aes(x=thres, y=nb_over_thres, group=symbol, color=symbol)) +
geom_line() +
ylab("Number of cases in x days") +
xlab("Difference threshold (%)") +
facet_wrap(~pair)
#
ggplot(bilan, aes(x=thres, y=nb_over_thres, group=symbol, color=symbol)) +
geom_line() +
ylab("Number of cases in x days") +
xlab("Difference threshold (%)") +
facet_wrap(~pair, ncol=5)
# Load result
load("../DATA/public_ticker_harvest.Rdata")
Ticker <- Ticker %>% sample_n(200000)
# Occurence of each
table(Ticker$platform, Ticker$symbol)
# find all the pairs of platform
list_platforms <- Ticker$platform %>% unique() %>% as.character()
list_pairs <- combn(list_platforms, 2)
#
bilan=data.frame()
for(i in c(1:ncol(list_pairs))){
diff <- find_differences(list_pairs[1,i], list_pairs[2,i])
nbSignifDiff <- find_signif_diff(diff)
nbSignifDiff$pair <- paste( list_pairs[1,i], list_pairs[2,i], sep="-")
bilan <- rbind(bilan, nbSignifDiff)
}
#
ggplot(bilan, aes(x=thres, y=nb_over_thres, group=symbol, color=symbol)) +
geom_line() +
ylab("Number of cases in x days") +
xlab("Difference threshold (%)") +
facet_wrap(~pair, ncol=5)
Ticker
Ticker %>%
ggplot( aes(x=time, y=volume, color=symbol)) +
geom_line() +
facet_wrap( ~platform )
Ticker %>%
head(1000) %>%
ggplot( aes(x=time, y=volume, color=symbol)) +
geom_line() +
facet_wrap( ~platform )
Ticker %>%
head(1000) %>%
ggplot( aes(x=time, y=volume, color=symbol)) +
geom_line()
Ticker %>% summary
Ticker %>%
head(1000) %>%
ggplot( aes(x=time, y=as.numeric(volume), color=symbol)) +
geom_line()
Ticker %>%
head(1000) %>%
ggplot( aes(x=time, y=as.numeric(volume), color=symbol)) +
geom_line() +
geom_wrap(platform)
Ticker %>%
head(1000) %>%
ggplot( aes(x=time, y=as.numeric(volume), color=symbol)) +
geom_line() +
geom_wrap(~platform)
Ticker %>%
head(1000) %>%
ggplot( aes(x=time, y=as.numeric(volume), color=symbol)) +
geom_line() +
facet_wrap(~platform)
Ticker %>%
head(1000) %>%
ggplot( aes(x=time, y=as.numeric(volume), color=symbol)) +
geom_line() +
facet_wrap(~platform, scale="free")
Ticker %>%
ggplot( aes(x=time, y=as.numeric(volume), color=symbol)) +
geom_line() +
facet_wrap(~platform, scale="free")
Ticker %>%
ggplot( aes(x=time, y=as.numeric(volume), color=platform)) +
geom_line() +
facet_wrap(~symbol, scale="free")
Ticker %>%
ggplot( aes(x=time, y=as.numeric(volume), color=platform)) +
geom_line() +
facet_wrap(~symbol, scale="free")
# find all the pairs of platform
list_platforms <- Ticker$platform %>% unique() %>% as.character()
list_pairs <- combn(list_platforms, 2)
#
bilan=data.frame()
for(i in c(1:ncol(list_pairs))){
diff <- find_differences(list_pairs[1,i], list_pairs[2,i])
nbSignifDiff <- find_signif_diff(diff)
nbSignifDiff$pair <- paste( list_pairs[1,i], list_pairs[2,i], sep="-")
bilan <- rbind(bilan, nbSignifDiff)
}
#
ggplot(bilan, aes(x=thres, y=nb_over_thres, group=symbol, color=symbol)) +
geom_line() +
ylab("Number of cases in x days") +
xlab("Difference threshold (%)") +
facet_wrap(~pair, ncol=5)
# to access the Cex API:
customer_id="up113961565"
key="iAzeBViWLSfe4DkO2AqUmW32o"
secret="xCykHj9eJqTAdUOWbbvRCTDYAB0"
# A few libraries are needed
library(tidyverse)
library(digest)       # For the hmac function that allows to create the signature
library(RCurl)        # Pour récupérer les données en appelant des URLS
require(jsonlite)      # To go from JSON to data frame
# A function that returns my Cex balance
get_my_balance_cex=function(){
nonce=as.character(as.numeric(Sys.time()) * 1000000)
signature = toupper( hmac(key = secret, object = paste0( nonce, customer_id, key), algo = "sha256"))
post_data <- paste0("key=", key, "&signature=", signature, "&nonce=", nonce)
curl <- getCurlHandle()
query_result_json <- rawToChar(getURLContent(curl = curl, url = "https://cex.io/api/balance/", binary = TRUE, postfields = post_data))
result=fromJSON(query_result_json) %>% as.data.frame()
return(result)
}
get_my_balance_cex()
# A function that returns open orders
get_open_orders_cex=function(){
nonce=as.character(as.numeric(Sys.time()) * 1000000)
signature = toupper( hmac(key = secret, object = paste0( nonce, customer_id, key), algo = "sha256"))
post_data <- paste0("key=", key, "&signature=", signature, "&nonce=", nonce)
curl <- getCurlHandle()
query_result_json <- rawToChar(getURLContent(curl = curl, url = "https://cex.io/api/open_orders/BTC/USD", binary = TRUE, postfields = post_data))
result=fromJSON(query_result_json) %>% as.data.frame()
return(result)
}
get_open_orders_cex()
library(LCSLCIS)
help("show_connection")
o1 <- data.frame(
V1=c("g","h","c","f","e","d","m","q","r","a","b","n","o","p"),
V2=c(1.1,1.1,3.4,3.4,3.4,3.4,3.5,3.5,6.6,6.6,7.2,7.2,8,8)
)
o2 <- data.frame(
V1=c("k","a","b","l","c","e","d","f","i","j","h","g"),
V2=c(0.1,1.2,1.2,4.2,4.2,5,5,5,5.3,5.3,6.7,6.7)
)
show_connection(o1, o2)
# run the LCS function
res <- LCS(o1,o2)
#install.packages("devtools")
library(devtools)
install_github("holtzy/LCSLCIS")
library(LCSLCIS)
o1 <- data.frame(
V1=c("g","h","c","f","e","d","m","q","r","a","b","n","o","p"),
V2=c(1.1,1.1,3.4,3.4,3.4,3.4,3.5,3.5,6.6,6.6,7.2,7.2,8,8)
)
o2 <- data.frame(
V1=c("k","a","b","l","c","e","d","f","i","j","h","g"),
V2=c(0.1,1.2,1.2,4.2,4.2,5,5,5,5.3,5.3,6.7,6.7)
)
show_connection(o1, o2)
# run the LCS function
res <- LCS(o1,o2)
#install.packages("devtools")
library(devtools)
install_github("holtzy/LCSLCIS")
#install.packages("devtools")
library(devtools)
install_github("holtzy/LCSLCIS")
library(LCSLCIS)
o1 <- data.frame(
V1=c("g","h","c","f","e","d","m","q","r","a","b","n","o","p"),
V2=c(1.1,1.1,3.4,3.4,3.4,3.4,3.5,3.5,6.6,6.6,7.2,7.2,8,8)
)
o2 <- data.frame(
V1=c("k","a","b","l","c","e","d","f","i","j","h","g"),
V2=c(0.1,1.2,1.2,4.2,4.2,5,5,5,5.3,5.3,6.7,6.7)
)
show_connection(o1, o2)
# run the LCS function
res <- LCS(o1,o2)
# The number of elements we can keep without order mismatch is
res$LLCS
# The elements we can keep are:
res$LCS
# We can represent that on the diagram:
show_connection(o1, o2, tokeep=res$LCS)
data(geneticMap)
head(map1)
head(map2)
o1 <- map1 %>% filter(V0=="1A") %>% select(V1, V2) %>% arrange(V2)
o2 <- map2 %>% filter(V0=="1A") %>% select(V1, V2) %>% arrange(V2)
show_connection(o1, o2, showName=FALSE)
res <- LCIS(o1,o2)
show_connection(o1, o2, tokeep=res$LCIS, showName=FALSE)
knitr::opts_chunk$set(echo = TRUE)
diff <- Ticker %>%
filter(platform %in% c("Bitstamp", "Cex")) %>%
group_by(time, symbol) %>%
summarise(max=max( as.numeric(last) ), min=min( as.numeric(last) ) ) %>%
mutate( diff=max-min, diff_perc=(max-min)/max*100 )
library(tidyverse)
library(rmarkdown)    # You need this library to run this template.
library(epuRate)      # Install with devtools: install_github("holtzy/epuRate", force=TRUE)
library(DT)
# Load result
load("../DATA/public_ticker_harvest.Rdata")
Ticker <- Ticker %>% sample_n(200000)
# Occurence of each
table(Ticker$platform, Ticker$symbol)
diff <- Ticker %>%
filter(platform %in% c("Bitstamp", "Cex")) %>%
group_by(time, symbol) %>%
summarise(max=max( as.numeric(last) ), min=min( as.numeric(last) ) ) %>%
mutate( diff=max-min, diff_perc=(max-min)/max*100 )
ggplot(diff, aes(x=time, y=diff_perc, group=symbol, fill=symbol)) +
geom_area() +
facet_wrap(~symbol, nrow=5) +
theme(legend.position="none") +
ylim(0,4)
# A function that calculates the difference between 2 platforms for every currency at each time stamp
find_differences <- function(plat1, plat2){
diff <- Ticker %>%
filter(platform %in% c(plat1, plat2)) %>%
select(time, platform, symbol, ask, bid) %>%
mutate(ask=as.numeric(ask), bid=as.numeric(bid)) %>%
gather(temp, value, -time, -platform, -symbol) %>%
mutate(platform=gsub(plat1,"plat1", platform)) %>%
mutate(platform=gsub(plat2,"plat2", platform)) %>%
unite(temp1, platform, temp, sep="_") %>%
spread( key=temp1, value=value) %>%
mutate(
diff1=(plat1_bid-plat2_ask)/plat1_bid*100,
diff2=(plat2_bid-plat1_ask)/plat2_bid*100
) %>%
rowwise() %>%
mutate( diff_perc=max(diff1, diff2) )
return(diff)
}
# Find differences between kraken and bitstamp
diff <- find_differences("Bitstamp", "Cex")
ggplot(diff, aes(x=time, y=diff_perc, group=symbol, fill=symbol)) +
geom_area() +
facet_wrap(~symbol, nrow=5) +
theme(legend.position="none") +
ylim(0,4)
